generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    ADMINISTRATOR
    DELIVERY_PERSON
}

model User {
    id             String    @id @default(uuid())
    name           String
    documentNumber String    @unique @map("document_number")
    email          String    @unique
    phone          String
    state          String
    city           String
    password       String
    role           UserRole? @default(DELIVERY_PERSON)
    deletedAt      DateTime? @map("deleted_at")

    status              Status[]
    orderCreator        Order[]  @relation("creator")
    orderDeliveryPerson Order[]  @relation("delivery")

    @@map("users")
}

model Receiver {
    id             String    @id @default(uuid())
    name           String
    documentNumber String    @unique @map("document_number")
    email          String    @unique
    phone          String
    address        String
    state          String
    city           String
    neighborhood   String
    zipCode        String    @map("zip_code")
    reference      String?
    deletedAt      DateTime? @map("deleted_at")

    order Order[]

    @@map("receivers")
}

model DistributionCenter {
    id        String    @id @default(uuid())
    name      String
    state     String
    city      String
    deletedAt DateTime? @map("deleted_at")

    orderStatus     Status[]
    originLocation  Order[]  @relation("origin")
    currentLocation Order[]  @relation("current")

    @@map("distribution_centers")
}

enum OrderStatusCode {
    POSTED
    PICKED
    TRANSFER_PROGRESS
    AWAITING_PICK_UP
    TRANSFER_FINISHED
    ON_ROUTE
    DELIVERED
    CANCELED
    RETURNED
}

model Order {
    id                String          @id @default(uuid())
    currentStatusCode OrderStatusCode @default(POSTED)
    postedAt          DateTime        @default(now())
    updatedAt         DateTime        @default(now()) @updatedAt

    creatorId         String  @map("creator_id")
    deliveryPersonId  String? @map("delivery_person_id")
    receiverId        String  @map("receiver_id")
    originLocationId  String  @map("origin_location_id")
    currentLocationId String  @map("current_location_id")

    creator         User               @relation(name: "creator", fields: [creatorId], references: [id])
    deliveryPerson  User?              @relation(name: "delivery", fields: [deliveryPersonId], references: [id])
    receiver        Receiver           @relation(fields: [receiverId], references: [id])
    originLocation  DistributionCenter @relation(name: "origin", fields: [originLocationId], references: [id])
    currentLocation DistributionCenter @relation(name: "current", fields: [currentLocationId], references: [id])

    orderStatus Status[]

    @@map("orders")
}

model Status {
    id         String          @id @default(uuid())
    statusCode OrderStatusCode @default(POSTED)
    details    String?
    updatedAt  DateTime        @default(now()) @updatedAt

    orderId           String  @map("order_id")
    creatorId         String  @map("creator_id")
    currentLocationId String? @map("current_location_id")

    order           Order               @relation(fields: [orderId], references: [id], onDelete: Cascade)
    creator         User                @relation(fields: [creatorId], references: [id])
    currentLocation DistributionCenter? @relation(fields: [currentLocationId], references: [id])

    attachments Attachment[]

    @@map("orders_statuses")
}

model Attachment {
    id            String  @id @default(uuid())
    url           String
    orderStatusId String? @map("order_status_id")

    orderStatus Status? @relation(fields: [orderStatusId], references: [id])

    @@map("orders_attachments")
}

// model Notification {
//     id  String @id @default(uuid())
//     @@map("orders_attachments")
// }
